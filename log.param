#-----CLASS v3.2.3 (branch: b'', hash: b'')-----

#-----CLASS v2.9.4 (branch: b'', hash: b'')-----

#data.experiments=['Planck_highl_TTTEEE', 'Planck_lowl_EE', 'Planck_lowl_TT', 'Planck_lensing', 'bao_boss_dr12', 'bao_smallz_2014','Pantheon','hst']
#data.experiments=['Planck_highl_TTTEEE', 'Planck_lowl_EE', 'Planck_lowl_TT', 'Planck_lensing', 'bao' ,'Pantheon_Plus']
data.experiments=['Planck_highl_TTTEEE', 'Planck_lowl_EE', 'Planck_lowl_TT', 'Planck_lensing', 'bao' ,'Pantheon_Plus_SH0ES']

#data.experiments=['DES','Planck_highl_TTTEEE', 'Planck_lowl_EE', 'Planck_lowl_TT', 'Planck_lensing', 'bao_boss_dr12', 'bao_smallz_2014','hst']

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
data.over_sampling=[1,5, 5]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list

data.parameters['omega_b']                 = [      2.251,      None, None,      0.015,   0.01, 'cosmo']
data.parameters['omega_cdm']               = [     0.1320,      None, None,     0.0013,      1, 'cosmo']
data.parameters['H0']                      = [      72.81,       65.,  80.,        0.8,      1, 'cosmo']
data.parameters['ln10^{10}A_s']            = [      3.074,      None, None,      0.015,      1, 'cosmo']
data.parameters['n_s']                     = [     0.9860,      None, None,     0.0042,      1, 'cosmo']
data.parameters['tau_reio']                = [     0.0680,     0.004, None,      0.008,      1, 'cosmo']
data.parameters['w0_fld']       = [-1.,         -2.,-0.34,       0.1,    1, 'cosmo']
data.parameters['wa_fld']       = [-0.5,         -3.,  2.,       0.1,    1, 'cosmo']
#data.parameters['Omega0_L']       = [0,         -10,  0.68,       1,    1, 'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name


data.parameters['b^1']         = [1.45,    0.8,   3.0,   0.05,  1,  'nuisance']
data.parameters['b^2']         = [1.55,    0.8,   3.0,   0.05,  1,  'nuisance']
data.parameters['b^3']         = [1.65,    0.8,   3.0,   0.05,  1,  'nuisance']
data.parameters['b^4']         = [1.80,    0.8,   3.0,   0.05,  1,  'nuisance']
data.parameters['b^5']         = [2.00,    0.8,   3.0,   0.05,  1,  'nuisance']
data.parameters['A_ia']        = [1,        -5,     5,    0.2,  1,  'nuisance']
data.parameters['eta_ia']      = [1,        -5,     5,    0.2,  1,  'nuisance']
data.parameters['Delta z^1_l']         = [0.002,     -0.05,     0.05,   0.005,  1,  'nuisance']
data.parameters['Delta z^2_l']         = [0.001,     -0.05,     0.05,   0.005,  1,  'nuisance']
data.parameters['Delta z^3_l']         = [0.003,     -0.05,     0.05,   0.005,  1,  'nuisance']
data.parameters['Delta z^4_l']         = [0,         -0.05,      0.1,   0.005,  1,  'nuisance']
data.parameters['Delta z^5_l']         = [0,         -0.05,      0.1,   0.005,  1,  'nuisance']
data.parameters['Delta z^1_s']         = [0.002,      -0.1,      0.1,    0.01,  1,  'nuisance']
data.parameters['Delta z^2_s']         = [-0.015,     -0.1,      0.1,    0.01,  1,  'nuisance']
data.parameters['Delta z^3_s']         = [0.007,      -0.1,      0.1,    0.01,  1,  'nuisance']
data.parameters['Delta z^4_s']         = [-0.018,     -0.1,      0.1,    0.01,  1,  'nuisance']
data.parameters['m^1']         = [0.012,     -0.1,     0.1,   0.005,  1,  'nuisance']
data.parameters['m^2']         = [0.012,     -0.1,     0.1,   0.005,  1,  'nuisance']
data.parameters['m^3']         = [0.012,     -0.1,     0.1,   0.005,  1,  'nuisance']
data.parameters['m^4']         = [0.012,     -0.1,     0.1,   0.005,  1,  'nuisance']

data.parameters['A_cib_217']         = [    47.2,     0,   200,     6.2593,     1, 'nuisance']
data.parameters['cib_index']         = [    -1.3,  -1.3,  -1.3,          0,     1, 'nuisance']
data.parameters['xi_sz_cib']         = [    0.42,     0,     1,       0.33,     1, 'nuisance']
data.parameters['A_sz']              = [    7.23,     0,    10,     1.4689,     1, 'nuisance']
data.parameters['ps_A_100_100']      = [   251.0,     0,   400,     29.438,     1, 'nuisance']
data.parameters['ps_A_143_143']      = [    47.4,     0,   400,     9.9484,     1, 'nuisance']
data.parameters['ps_A_143_217']      = [    47.3,     0,   400,     11.356,     1, 'nuisance']
data.parameters['ps_A_217_217']      = [   119.8,     0,   400,     10.256,     1, 'nuisance']
data.parameters['ksz_norm']          = [    0.01,     0,    10,     2.7468,     1, 'nuisance']
data.parameters['gal545_A_100']      = [    8.86,     0,    50,     1.8928,     1, 'nuisance']
data.parameters['gal545_A_143']      = [   11.10,     0,    50,     1.8663,     1, 'nuisance']
data.parameters['gal545_A_143_217']  = [    19.8,     0,   100,     3.8796,     1, 'nuisance']
data.parameters['gal545_A_217']      = [    95.1,     0,   400,     6.9759,     1, 'nuisance']
data.parameters['galf_EE_A_100']     = [   0.055, 0.055, 0.055,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_143'] = [   0.040, 0.040, 0.040,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_217'] = [   0.094, 0.094, 0.094,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143']     = [   0.086, 0.086, 0.086,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143_217'] = [    0.21,  0.21,  0.21,          0,     1, 'nuisance']
data.parameters['galf_EE_A_217']     = [    0.70,  0.70,  0.70,          0,     1, 'nuisance']
data.parameters['galf_EE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['galf_TE_A_100']     = [   0.114,     0,    10,   0.038762,     1, 'nuisance']
data.parameters['galf_TE_A_100_143'] = [   0.134,     0,    10,   0.030096,     1, 'nuisance']
data.parameters['galf_TE_A_100_217'] = [   0.482,     0,    10,   0.086185,     1, 'nuisance']
data.parameters['galf_TE_A_143']     = [   0.224,     0,    10,   0.055126,     1, 'nuisance']
data.parameters['galf_TE_A_143_217'] = [   0.664,     0,    10,   0.082349,     1, 'nuisance']
data.parameters['galf_TE_A_217']     = [    2.08,     0,    10,    0.27175,     1, 'nuisance']
data.parameters['galf_TE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['calib_100T']        = [  999.69,     0,  3000,    0.61251, 0.001, 'nuisance']
data.parameters['calib_217T']        = [  998.16,     0,  3000,    0.63584, 0.001, 'nuisance']
data.parameters['calib_100P']        = [   1.021, 1.021, 1.021,          0,     1, 'nuisance']
data.parameters['calib_143P']        = [   0.966, 0.966, 0.966,          0,     1, 'nuisance']
data.parameters['calib_217P']        = [   1.040, 1.040, 1.040,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_100_100_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_143_143_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_217_217_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_planck']          = [ 1.00061,   0.9,   1.1,     0.0025,     1, 'nuisance']
data.parameters['A_pol']             = [       1,     1,     1,          0,     1, 'nuisance']


# dust power at ell=80, nu=353 GHz [uK^2]
# data.parameters['BBdust']            = [      3.,    0.,   15.,        0.1,     1, 'nuisance']
# sync power at ell=80, nu=23 GHz [uK^2]
# data.parameters['BBsync']            = [      1.,    0.,   50.,         1.,     1, 'nuisance']
# dust spatial power spectrum power law index
# data.parameters['BBalphadust']       = [   -0.42,  -1.0,    0.,       0.01,     1, 'nuisance']
# dust SED power law index
# data.parameters['BBbetadust']        = [    1.59,  1.04,  2.14,       0.02,     1, 'nuisance']
# dust blackbody temperature [K] -- fixed / very insensitive to this
# data.parameters['BBTdust']           = [    19.6,  19.6,  19.6,        0.0,     1, 'nuisance']
# sync spatial power specturm power law index
# data.parameters['BBalphasync']       = [    -0.6,  -1.0,    0.,       0.01,     1, 'nuisance']
# sync SED power law index
# data.parameters['BBbetasync']        = [    -3.1,  -4.5,  -2.0,       0.02,     1, 'nuisance']
# correlation between dust and sync
# NOTE: For BK15 analysis, we are allowing this parameter to range 
#       from -1 to 1 (allowed range was 0 to 1 for BK14).
# data.parameters['BBdustsynccorr']    = [     0.2,  -1.0,   1.0,       0.01,     1, 'nuisance']
# EE/BB ratios -- fixed / only used if E-modes are turned on
# data.parameters['EEtoBB_dust']       = [     2.0,   2.0,   2.0,          0,     1, 'nuisance']
# data.parameters['EEtoBB_sync']       = [     2.0,   2.0,   2.0,          0,     1, 'nuisance']
# Band center errors, fixed to zero
# data.parameters['gamma_corr']        = [     0.0,   0.0,   0.0,          0,     1, 'nuisance']
# data.parameters['gamma_95']          = [     0.0,   0.0,   0.0,          0,     1, 'nuisance']
# data.parameters['gamma_150']         = [     0.0,   0.0,   0.0,          0,     1, 'nuisance']
# data.parameters['gamma_220']         = [     0.0,   0.0,   0.0,          0,     1, 'nuisance']

data.parameters['M']                 = [   -19.27,  None,  None,       0.02,     1, 'nuisance']


# For SPT
#data.parameters['SPT_SZ']       = [5.6,  0,-1, 2.5, 1,  'nuisance']
#data.parameters['SPT_PS']       = [20.4,-1,-1, 2.7, 1, 'nuisance']
#data.parameters['SPT_CL']       = [5.3, -1,-1, 2.3, 1, 'nuisance']

# Derived parameters

data.parameters['z_d']             = [1, None, None, 0,     1,   'derived']
data.parameters['rs_d']            = [1, None, None, 0,     1,   'derived']
data.parameters['z_rec']           = [1, None, None, 0,     1,   'derived']
data.parameters['rs_rec']          = [1, None, None, 0,     1,   'derived']
data.parameters['100*theta_s']     = [0, None, None, 0,     1,   'derived']
data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']
data.parameters['Omega_m']         = [0, None, None, 0,     1,   'derived']
#data.parameters['Omega_L']         = [0, None, None, 0,     1,   'derived']
data.parameters['S8']          = [0, None, None, 0,     1,   'derived']
#data.parameters['w0_eff']          = [0, None, None, 0,     1,   'derived']
#data.parameters['wa_eff']          = [0, None, None, 0,     1,   'derived']


# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['YHe'] = 'BBN'
data.cosmo_arguments['k_pivot'] = 0.05
data.cosmo_arguments['Omega_Lambda'] = 0
#data.cosmo_arguments['Omega_scf'] = 0
#data.cosmo_arguments['Omega_fld'] = 0
data.cosmo_arguments['fluid_equation_of_state'] = 'CLP'
data.cosmo_arguments['lensing'] = 'yes'
#data.cosmo_arguments['attractor_ic_scf'] = 'no'
#data.cosmo_arguments['scf_tuning_index'] = 0
#data.cosmo_arguments['scf_parameters'] = '10, 0, 0, 0, 100, 0'

# For debug only
# data.cosmo_arguments['input_verbose'] = 10
# data.cosmo_arguments['background_verbose'] = 1
# data.cosmo_arguments['perturbations_verbose'] = 1
# data.cosmo_arguments['lensing_verbose'] = 1

data.cosmo_arguments['gauge'] = 'synchronous'

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV
data.cosmo_arguments['N_ur'] = 3.046
# data.cosmo_arguments['N_ncdm'] = 1
# data.cosmo_arguments['m_ncdm'] = 0.06
# data.cosmo_arguments['T_ncdm'] = 0.71611

# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk,lCl'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.


#------ Mcmc parameters ----

data.N=10
data.write_step=5


#-----Likelihood-DES-----
DES.data_directory = '/BIGDATA1/ucas_yspiao_1/wh/data'
DES.data_n_g = 'DES/DES_1YR_final_nz_lens.dat'
DES.data_n_k = 'DES/DES_1YR_final_nz_source.dat'
DES.data_theta_bins = 'DES/DES_1YR_final_theta_bins.dat'
DES.data_selection = 'DES/DES_1YR_final_selection.dat'
DES.data_cov = 'DES/DES_1YR_final_cov.dat'
DES.data_xip = 'DES/DES_1YR_final_xip.dat'
DES.data_xim = 'DES/DES_1YR_final_xim.dat'
DES.data_gammat = 'DES/DES_1YR_final_gammat.dat'
DES.data_wtheta = 'DES/DES_1YR_final_wtheta.dat'
DES.xmax = 50.0
DES.dx = 0.25
DES.dx_below_threshold = 0.05
DES.dx_above_threshold = 0.15
DES.dx_threshold = 0.4
DES.zmax = 3.52
DES.k_max_h_by_Mpc = 50.0
DES.use_nuisance = ['b^1', 'b^2', 'b^3', 'b^4', 'b^5', 'A_ia', 'eta_ia', 'Delta z^1_l', 'Delta z^2_l', 'Delta z^3_l', 'Delta z^4_l', 'Delta z^5_l', 'Delta z^1_s', 'Delta z^2_s', 'Delta z^3_s', 'Delta z^4_s', 'm^1', 'm^2', 'm^3', 'm^4']
DES.DzL_center = [0.008, -0.005, 0.006, 0.0, 0.0]
DES.DzL_sigma = [0.007, 0.007, 0.006, 0.01, 0.01]
DES.DzS_center = [-0.001, -0.019, 0.009, -0.018]
DES.DzS_sigma = [0.016, 0.013, 0.011, 0.022]
DES.m_center = [0.012, 0.012, 0.012, 0.012]
DES.m_sigma = [0.023, 0.023, 0.023, 0.023]


#-----Likelihood-Planck_highl_TTTEEE-----
Planck_highl_TTTEEE.path_clik = '/BIGDATA1/ucas_yspiao_1/jjq/montepython/data/Planck18/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/hi_l/plik/plik_rd12_HM_v22b_TTTEEE.clik'
Planck_highl_TTTEEE.A_planck_prior_only = True
Planck_highl_TTTEEE.A_planck_prior_center = 1
Planck_highl_TTTEEE.A_planck_prior_variance = 0.0025
Planck_highl_TTTEEE.calib_100T_prior_center = 1.0002
Planck_highl_TTTEEE.calib_100T_prior_variance = 0.0007
Planck_highl_TTTEEE.calib_217T_prior_center = 0.99805
Planck_highl_TTTEEE.calib_217T_prior_variance = 0.00065
Planck_highl_TTTEEE.gal545_A_100_prior_center = 8.6
Planck_highl_TTTEEE.gal545_A_100_prior_variance = 2
Planck_highl_TTTEEE.gal545_A_143_prior_center = 10.6
Planck_highl_TTTEEE.gal545_A_143_prior_variance = 2
Planck_highl_TTTEEE.gal545_A_143_217_prior_center = 23.5
Planck_highl_TTTEEE.gal545_A_143_217_prior_variance = 8.5
Planck_highl_TTTEEE.gal545_A_217_prior_center = 91.9
Planck_highl_TTTEEE.gal545_A_217_prior_variance = 20
Planck_highl_TTTEEE.galf_TE_A_100_prior_center = 0.13
Planck_highl_TTTEEE.galf_TE_A_100_prior_variance = 0.042
Planck_highl_TTTEEE.galf_TE_A_100_143_prior_center = 0.13
Planck_highl_TTTEEE.galf_TE_A_100_143_prior_variance = 0.036
Planck_highl_TTTEEE.galf_TE_A_100_217_prior_center = 0.46
Planck_highl_TTTEEE.galf_TE_A_100_217_prior_variance = 0.09
Planck_highl_TTTEEE.galf_TE_A_143_prior_center = 0.207
Planck_highl_TTTEEE.galf_TE_A_143_prior_variance = 0.072
Planck_highl_TTTEEE.galf_TE_A_143_217_prior_center = 0.69
Planck_highl_TTTEEE.galf_TE_A_143_217_prior_variance = 0.09
Planck_highl_TTTEEE.galf_TE_A_217_prior_center = 1.938
Planck_highl_TTTEEE.galf_TE_A_217_prior_variance = 0.54
Planck_highl_TTTEEE.joint_sz_prior = True
Planck_highl_TTTEEE.joint_sz_prior_center = 9.5
Planck_highl_TTTEEE.joint_sz_prior_variance = 3.0


#-----Likelihood-Planck_lowl_EE-----
Planck_lowl_EE.path_clik = '/BIGDATA1/ucas_yspiao_1/jjq/montepython/data/Planck18/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/low_l/simall/simall_100x143_offlike5_EE_Aplanck_B.clik'


#-----Likelihood-Planck_lowl_TT-----
Planck_lowl_TT.path_clik = '/BIGDATA1/ucas_yspiao_1/jjq/montepython/data/Planck18/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/low_l/commander/commander_dx12_v3_2_29.clik'


#-----Likelihood-Planck_lensing-----
Planck_lensing.path_clik = '/BIGDATA1/ucas_yspiao_1/jjq/montepython/data/Planck18/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/lensing/smicadx12_Dec5_ftl_mv2_ndclpp_p_teb_consext8.clik_lensing'


#-----Likelihood-bao-----
bao.data_directory = '/BIGDATA1/ucas_yspiao_1/wh/data'
bao.file = 'DESI.txt'
bao.rs_rescale = 1.0


#-----Likelihood-hst-----
hst.h = 0.7304
hst.sigma = 0.0104


#-----------Cosmological-arguments---------
data.cosmo_arguments.update({'YHe': 'BBN', 'k_pivot': 0.05, 'Omega_Lambda': 0, 'fluid_equation_of_state': 'CLP', 'lensing': 'yes', 'gauge': 'synchronous', 'N_ur': 3.046, 'output': 'mPk,lCl tCl lCl pCl ', 'P_k_max_h/Mpc': 1.0, 'l_max_scalars': 2508})


#--------Default-Configuration------
data.path['root']	= '/BIGDATA1/ucas_yspiao_1/wh/montepython'
data.path['MontePython']	= '/BIGDATA1/ucas_yspiao_1/wh/montepython/montepython'
data.path['data']	= '/BIGDATA1/ucas_yspiao_1/wh/data'
data.path['cosmo']	= '/BIGDATA1/ucas_yspiao_1/wh/class_public-3.2.3'
data.path['clik']	= '/BIGDATA1/ucas_yspiao_1/jjq/montepython/data/Planck18/code/plc_3.0/plc-3.01'
